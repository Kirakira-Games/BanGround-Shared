// source: Chart.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Chart', null, global);
goog.exportSymbol('proto.Difficulty', null, global);
goog.exportSymbol('proto.Note', null, global);
goog.exportSymbol('proto.NoteAnim', null, global);
goog.exportSymbol('proto.NoteType', null, global);
goog.exportSymbol('proto.TimingGroup', null, global);
goog.exportSymbol('proto.TimingPoint', null, global);
goog.exportSymbol('proto.Transition', null, global);
goog.exportSymbol('proto.TransitionColor', null, global);
goog.exportSymbol('proto.TransitionPropertyFloat', null, global);
goog.exportSymbol('proto.TransitionVector', null, global);
goog.exportSymbol('proto.ValuePoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Chart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Chart.repeatedFields_, null);
};
goog.inherits(proto.Chart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Chart.displayName = 'proto.Chart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimingGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimingGroup.repeatedFields_, null);
};
goog.inherits(proto.TimingGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimingGroup.displayName = 'proto.TimingGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Note = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Note.repeatedFields_, null);
};
goog.inherits(proto.Note, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Note.displayName = 'proto.Note';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NoteAnim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NoteAnim.repeatedFields_, null);
};
goog.inherits(proto.NoteAnim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NoteAnim.displayName = 'proto.NoteAnim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransitionVector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransitionVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransitionVector.displayName = 'proto.TransitionVector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransitionPropertyFloat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransitionPropertyFloat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransitionPropertyFloat.displayName = 'proto.TransitionPropertyFloat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimingPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimingPoint.repeatedFields_, null);
};
goog.inherits(proto.TimingPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimingPoint.displayName = 'proto.TimingPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransitionColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransitionColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransitionColor.displayName = 'proto.TransitionColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ValuePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ValuePoint.repeatedFields_, null);
};
goog.inherits(proto.ValuePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ValuePoint.displayName = 'proto.ValuePoint';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Chart.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Chart.prototype.toObject = function(opt_includeInstance) {
  return proto.Chart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Chart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Chart.toObject = function(includeInstance, msg) {
  var f, obj = {
    difficulty: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.TimingGroup.toObject, includeInstance),
    bpmList: jspb.Message.toObjectList(msg.getBpmList(),
    proto.ValuePoint.toObject, includeInstance),
    version: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Chart}
 */
proto.Chart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Chart;
  return proto.Chart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Chart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Chart}
 */
proto.Chart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Difficulty} */ (reader.readEnum());
      msg.setDifficulty(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = new proto.TimingGroup;
      reader.readMessage(value,proto.TimingGroup.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 5:
      var value = new proto.ValuePoint;
      reader.readMessage(value,proto.ValuePoint.deserializeBinaryFromReader);
      msg.addBpm(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Chart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Chart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Chart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Chart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDifficulty();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.TimingGroup.serializeBinaryToWriter
    );
  }
  f = message.getBpmList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ValuePoint.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional Difficulty difficulty = 1;
 * @return {!proto.Difficulty}
 */
proto.Chart.prototype.getDifficulty = function() {
  return /** @type {!proto.Difficulty} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Difficulty} value
 * @return {!proto.Chart} returns this
 */
proto.Chart.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.Chart.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Chart} returns this
 */
proto.Chart.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.Chart.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Chart} returns this
 */
proto.Chart.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated TimingGroup groups = 4;
 * @return {!Array<!proto.TimingGroup>}
 */
proto.Chart.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.TimingGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimingGroup, 4));
};


/**
 * @param {!Array<!proto.TimingGroup>} value
 * @return {!proto.Chart} returns this
*/
proto.Chart.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.TimingGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimingGroup}
 */
proto.Chart.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.TimingGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Chart} returns this
 */
proto.Chart.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * repeated ValuePoint bpm = 5;
 * @return {!Array<!proto.ValuePoint>}
 */
proto.Chart.prototype.getBpmList = function() {
  return /** @type{!Array<!proto.ValuePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ValuePoint, 5));
};


/**
 * @param {!Array<!proto.ValuePoint>} value
 * @return {!proto.Chart} returns this
*/
proto.Chart.prototype.setBpmList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ValuePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ValuePoint}
 */
proto.Chart.prototype.addBpm = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ValuePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Chart} returns this
 */
proto.Chart.prototype.clearBpmList = function() {
  return this.setBpmList([]);
};


/**
 * optional int32 version = 6;
 * @return {number}
 */
proto.Chart.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Chart} returns this
 */
proto.Chart.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimingGroup.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimingGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.TimingGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimingGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimingGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    notesList: jspb.Message.toObjectList(msg.getNotesList(),
    proto.Note.toObject, includeInstance),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.TimingPoint.toObject, includeInstance),
    flags: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimingGroup}
 */
proto.TimingGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimingGroup;
  return proto.TimingGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimingGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimingGroup}
 */
proto.TimingGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Note;
      reader.readMessage(value,proto.Note.deserializeBinaryFromReader);
      msg.addNotes(value);
      break;
    case 2:
      var value = new proto.TimingPoint;
      reader.readMessage(value,proto.TimingPoint.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimingGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimingGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimingGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimingGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Note.serializeBinaryToWriter
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TimingPoint.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated Note notes = 1;
 * @return {!Array<!proto.Note>}
 */
proto.TimingGroup.prototype.getNotesList = function() {
  return /** @type{!Array<!proto.Note>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Note, 1));
};


/**
 * @param {!Array<!proto.Note>} value
 * @return {!proto.TimingGroup} returns this
*/
proto.TimingGroup.prototype.setNotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Note=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Note}
 */
proto.TimingGroup.prototype.addNotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Note, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimingGroup} returns this
 */
proto.TimingGroup.prototype.clearNotesList = function() {
  return this.setNotesList([]);
};


/**
 * repeated TimingPoint points = 2;
 * @return {!Array<!proto.TimingPoint>}
 */
proto.TimingGroup.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.TimingPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimingPoint, 2));
};


/**
 * @param {!Array<!proto.TimingPoint>} value
 * @return {!proto.TimingGroup} returns this
*/
proto.TimingGroup.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TimingPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimingPoint}
 */
proto.TimingGroup.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TimingPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimingGroup} returns this
 */
proto.TimingGroup.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};


/**
 * optional uint32 flags = 3;
 * @return {number}
 */
proto.TimingGroup.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TimingGroup} returns this
 */
proto.TimingGroup.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Note.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Note.prototype.toObject = function(opt_includeInstance) {
  return proto.Note.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Note} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Note.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beatList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    lane: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tickstack: jspb.Message.getFieldWithDefault(msg, 4, 0),
    animsList: jspb.Message.toObjectList(msg.getAnimsList(),
    proto.NoteAnim.toObject, includeInstance),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    flags: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Note}
 */
proto.Note.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Note;
  return proto.Note.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Note} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Note}
 */
proto.Note.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.NoteType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBeat(values[i]);
      }
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLane(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTickstack(value);
      break;
    case 5:
      var value = new proto.NoteAnim;
      reader.readMessage(value,proto.NoteAnim.deserializeBinaryFromReader);
      msg.addAnims(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Note.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Note.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Note} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Note.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBeatList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getLane();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTickstack();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAnimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.NoteAnim.serializeBinaryToWriter
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional NoteType type = 1;
 * @return {!proto.NoteType}
 */
proto.Note.prototype.getType = function() {
  return /** @type {!proto.NoteType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.NoteType} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated int32 beat = 2;
 * @return {!Array<number>}
 */
proto.Note.prototype.getBeatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setBeatList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.addBeat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.clearBeatList = function() {
  return this.setBeatList([]);
};


/**
 * optional int32 lane = 3;
 * @return {number}
 */
proto.Note.prototype.getLane = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setLane = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 tickStack = 4;
 * @return {number}
 */
proto.Note.prototype.getTickstack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setTickstack = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated NoteAnim anims = 5;
 * @return {!Array<!proto.NoteAnim>}
 */
proto.Note.prototype.getAnimsList = function() {
  return /** @type{!Array<!proto.NoteAnim>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NoteAnim, 5));
};


/**
 * @param {!Array<!proto.NoteAnim>} value
 * @return {!proto.Note} returns this
*/
proto.Note.prototype.setAnimsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.NoteAnim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NoteAnim}
 */
proto.Note.prototype.addAnims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.NoteAnim, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.clearAnimsList = function() {
  return this.setAnimsList([]);
};


/**
 * optional float x = 6;
 * @return {number}
 */
proto.Note.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float y = 7;
 * @return {number}
 */
proto.Note.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional uint32 flags = 8;
 * @return {number}
 */
proto.Note.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Note} returns this
 */
proto.Note.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NoteAnim.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NoteAnim.prototype.toObject = function(opt_includeInstance) {
  return proto.NoteAnim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NoteAnim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NoteAnim.toObject = function(includeInstance, msg) {
  var f, obj = {
    beatList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    pos: (f = msg.getPos()) && proto.TransitionVector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NoteAnim}
 */
proto.NoteAnim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NoteAnim;
  return proto.NoteAnim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NoteAnim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NoteAnim}
 */
proto.NoteAnim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBeat(values[i]);
      }
      break;
    case 2:
      var value = new proto.TransitionVector;
      reader.readMessage(value,proto.TransitionVector.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NoteAnim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NoteAnim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NoteAnim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NoteAnim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeatList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TransitionVector.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int32 beat = 1;
 * @return {!Array<number>}
 */
proto.NoteAnim.prototype.getBeatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.NoteAnim} returns this
 */
proto.NoteAnim.prototype.setBeatList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.NoteAnim} returns this
 */
proto.NoteAnim.prototype.addBeat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NoteAnim} returns this
 */
proto.NoteAnim.prototype.clearBeatList = function() {
  return this.setBeatList([]);
};


/**
 * optional TransitionVector pos = 2;
 * @return {?proto.TransitionVector}
 */
proto.NoteAnim.prototype.getPos = function() {
  return /** @type{?proto.TransitionVector} */ (
    jspb.Message.getWrapperField(this, proto.TransitionVector, 2));
};


/**
 * @param {?proto.TransitionVector|undefined} value
 * @return {!proto.NoteAnim} returns this
*/
proto.NoteAnim.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NoteAnim} returns this
 */
proto.NoteAnim.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NoteAnim.prototype.hasPos = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransitionVector.prototype.toObject = function(opt_includeInstance) {
  return proto.TransitionVector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransitionVector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransitionVector.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = msg.getX()) && proto.TransitionPropertyFloat.toObject(includeInstance, f),
    y: (f = msg.getY()) && proto.TransitionPropertyFloat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransitionVector}
 */
proto.TransitionVector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransitionVector;
  return proto.TransitionVector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransitionVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransitionVector}
 */
proto.TransitionVector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TransitionPropertyFloat;
      reader.readMessage(value,proto.TransitionPropertyFloat.deserializeBinaryFromReader);
      msg.setX(value);
      break;
    case 2:
      var value = new proto.TransitionPropertyFloat;
      reader.readMessage(value,proto.TransitionPropertyFloat.deserializeBinaryFromReader);
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransitionVector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransitionVector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransitionVector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransitionVector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TransitionPropertyFloat.serializeBinaryToWriter
    );
  }
  f = message.getY();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TransitionPropertyFloat.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransitionPropertyFloat x = 1;
 * @return {?proto.TransitionPropertyFloat}
 */
proto.TransitionVector.prototype.getX = function() {
  return /** @type{?proto.TransitionPropertyFloat} */ (
    jspb.Message.getWrapperField(this, proto.TransitionPropertyFloat, 1));
};


/**
 * @param {?proto.TransitionPropertyFloat|undefined} value
 * @return {!proto.TransitionVector} returns this
*/
proto.TransitionVector.prototype.setX = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransitionVector} returns this
 */
proto.TransitionVector.prototype.clearX = function() {
  return this.setX(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransitionVector.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransitionPropertyFloat y = 2;
 * @return {?proto.TransitionPropertyFloat}
 */
proto.TransitionVector.prototype.getY = function() {
  return /** @type{?proto.TransitionPropertyFloat} */ (
    jspb.Message.getWrapperField(this, proto.TransitionPropertyFloat, 2));
};


/**
 * @param {?proto.TransitionPropertyFloat|undefined} value
 * @return {!proto.TransitionVector} returns this
*/
proto.TransitionVector.prototype.setY = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransitionVector} returns this
 */
proto.TransitionVector.prototype.clearY = function() {
  return this.setY(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransitionVector.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransitionPropertyFloat.prototype.toObject = function(opt_includeInstance) {
  return proto.TransitionPropertyFloat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransitionPropertyFloat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransitionPropertyFloat.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    transition: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransitionPropertyFloat}
 */
proto.TransitionPropertyFloat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransitionPropertyFloat;
  return proto.TransitionPropertyFloat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransitionPropertyFloat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransitionPropertyFloat}
 */
proto.TransitionPropertyFloat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.Transition} */ (reader.readEnum());
      msg.setTransition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransitionPropertyFloat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransitionPropertyFloat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransitionPropertyFloat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransitionPropertyFloat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTransition();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.TransitionPropertyFloat.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TransitionPropertyFloat} returns this
 */
proto.TransitionPropertyFloat.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional Transition transition = 2;
 * @return {!proto.Transition}
 */
proto.TransitionPropertyFloat.prototype.getTransition = function() {
  return /** @type {!proto.Transition} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Transition} value
 * @return {!proto.TransitionPropertyFloat} returns this
 */
proto.TransitionPropertyFloat.prototype.setTransition = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimingPoint.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimingPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.TimingPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimingPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimingPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    beatList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    speed: (f = msg.getSpeed()) && proto.TransitionPropertyFloat.toObject(includeInstance, f),
    tap: (f = msg.getTap()) && proto.TransitionColor.toObject(includeInstance, f),
    tapgrey: (f = msg.getTapgrey()) && proto.TransitionColor.toObject(includeInstance, f),
    flick: (f = msg.getFlick()) && proto.TransitionColor.toObject(includeInstance, f),
    slidetick: (f = msg.getSlidetick()) && proto.TransitionColor.toObject(includeInstance, f),
    slide: (f = msg.getSlide()) && proto.TransitionColor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimingPoint}
 */
proto.TimingPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimingPoint;
  return proto.TimingPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimingPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimingPoint}
 */
proto.TimingPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBeat(values[i]);
      }
      break;
    case 2:
      var value = new proto.TransitionPropertyFloat;
      reader.readMessage(value,proto.TransitionPropertyFloat.deserializeBinaryFromReader);
      msg.setSpeed(value);
      break;
    case 3:
      var value = new proto.TransitionColor;
      reader.readMessage(value,proto.TransitionColor.deserializeBinaryFromReader);
      msg.setTap(value);
      break;
    case 4:
      var value = new proto.TransitionColor;
      reader.readMessage(value,proto.TransitionColor.deserializeBinaryFromReader);
      msg.setTapgrey(value);
      break;
    case 5:
      var value = new proto.TransitionColor;
      reader.readMessage(value,proto.TransitionColor.deserializeBinaryFromReader);
      msg.setFlick(value);
      break;
    case 6:
      var value = new proto.TransitionColor;
      reader.readMessage(value,proto.TransitionColor.deserializeBinaryFromReader);
      msg.setSlidetick(value);
      break;
    case 7:
      var value = new proto.TransitionColor;
      reader.readMessage(value,proto.TransitionColor.deserializeBinaryFromReader);
      msg.setSlide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimingPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimingPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimingPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimingPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeatList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getSpeed();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TransitionPropertyFloat.serializeBinaryToWriter
    );
  }
  f = message.getTap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TransitionColor.serializeBinaryToWriter
    );
  }
  f = message.getTapgrey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TransitionColor.serializeBinaryToWriter
    );
  }
  f = message.getFlick();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.TransitionColor.serializeBinaryToWriter
    );
  }
  f = message.getSlidetick();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TransitionColor.serializeBinaryToWriter
    );
  }
  f = message.getSlide();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.TransitionColor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int32 beat = 1;
 * @return {!Array<number>}
 */
proto.TimingPoint.prototype.getBeatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.setBeatList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.addBeat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearBeatList = function() {
  return this.setBeatList([]);
};


/**
 * optional TransitionPropertyFloat speed = 2;
 * @return {?proto.TransitionPropertyFloat}
 */
proto.TimingPoint.prototype.getSpeed = function() {
  return /** @type{?proto.TransitionPropertyFloat} */ (
    jspb.Message.getWrapperField(this, proto.TransitionPropertyFloat, 2));
};


/**
 * @param {?proto.TransitionPropertyFloat|undefined} value
 * @return {!proto.TimingPoint} returns this
*/
proto.TimingPoint.prototype.setSpeed = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearSpeed = function() {
  return this.setSpeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimingPoint.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransitionColor tap = 3;
 * @return {?proto.TransitionColor}
 */
proto.TimingPoint.prototype.getTap = function() {
  return /** @type{?proto.TransitionColor} */ (
    jspb.Message.getWrapperField(this, proto.TransitionColor, 3));
};


/**
 * @param {?proto.TransitionColor|undefined} value
 * @return {!proto.TimingPoint} returns this
*/
proto.TimingPoint.prototype.setTap = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearTap = function() {
  return this.setTap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimingPoint.prototype.hasTap = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TransitionColor tapGrey = 4;
 * @return {?proto.TransitionColor}
 */
proto.TimingPoint.prototype.getTapgrey = function() {
  return /** @type{?proto.TransitionColor} */ (
    jspb.Message.getWrapperField(this, proto.TransitionColor, 4));
};


/**
 * @param {?proto.TransitionColor|undefined} value
 * @return {!proto.TimingPoint} returns this
*/
proto.TimingPoint.prototype.setTapgrey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearTapgrey = function() {
  return this.setTapgrey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimingPoint.prototype.hasTapgrey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TransitionColor flick = 5;
 * @return {?proto.TransitionColor}
 */
proto.TimingPoint.prototype.getFlick = function() {
  return /** @type{?proto.TransitionColor} */ (
    jspb.Message.getWrapperField(this, proto.TransitionColor, 5));
};


/**
 * @param {?proto.TransitionColor|undefined} value
 * @return {!proto.TimingPoint} returns this
*/
proto.TimingPoint.prototype.setFlick = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearFlick = function() {
  return this.setFlick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimingPoint.prototype.hasFlick = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TransitionColor slideTick = 6;
 * @return {?proto.TransitionColor}
 */
proto.TimingPoint.prototype.getSlidetick = function() {
  return /** @type{?proto.TransitionColor} */ (
    jspb.Message.getWrapperField(this, proto.TransitionColor, 6));
};


/**
 * @param {?proto.TransitionColor|undefined} value
 * @return {!proto.TimingPoint} returns this
*/
proto.TimingPoint.prototype.setSlidetick = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearSlidetick = function() {
  return this.setSlidetick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimingPoint.prototype.hasSlidetick = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TransitionColor slide = 7;
 * @return {?proto.TransitionColor}
 */
proto.TimingPoint.prototype.getSlide = function() {
  return /** @type{?proto.TransitionColor} */ (
    jspb.Message.getWrapperField(this, proto.TransitionColor, 7));
};


/**
 * @param {?proto.TransitionColor|undefined} value
 * @return {!proto.TimingPoint} returns this
*/
proto.TimingPoint.prototype.setSlide = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimingPoint} returns this
 */
proto.TimingPoint.prototype.clearSlide = function() {
  return this.setSlide(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimingPoint.prototype.hasSlide = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransitionColor.prototype.toObject = function(opt_includeInstance) {
  return proto.TransitionColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransitionColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransitionColor.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: jspb.Message.getFieldWithDefault(msg, 1, 0),
    g: jspb.Message.getFieldWithDefault(msg, 2, 0),
    b: jspb.Message.getFieldWithDefault(msg, 3, 0),
    a: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transition: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransitionColor}
 */
proto.TransitionColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransitionColor;
  return proto.TransitionColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransitionColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransitionColor}
 */
proto.TransitionColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setA(value);
      break;
    case 5:
      var value = /** @type {!proto.Transition} */ (reader.readEnum());
      msg.setTransition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransitionColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransitionColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransitionColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransitionColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getA();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTransition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 r = 1;
 * @return {number}
 */
proto.TransitionColor.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransitionColor} returns this
 */
proto.TransitionColor.prototype.setR = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 g = 2;
 * @return {number}
 */
proto.TransitionColor.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransitionColor} returns this
 */
proto.TransitionColor.prototype.setG = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 b = 3;
 * @return {number}
 */
proto.TransitionColor.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransitionColor} returns this
 */
proto.TransitionColor.prototype.setB = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 a = 4;
 * @return {number}
 */
proto.TransitionColor.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransitionColor} returns this
 */
proto.TransitionColor.prototype.setA = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Transition transition = 5;
 * @return {!proto.Transition}
 */
proto.TransitionColor.prototype.getTransition = function() {
  return /** @type {!proto.Transition} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Transition} value
 * @return {!proto.TransitionColor} returns this
 */
proto.TransitionColor.prototype.setTransition = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ValuePoint.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ValuePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.ValuePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ValuePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValuePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    beatList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ValuePoint}
 */
proto.ValuePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ValuePoint;
  return proto.ValuePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ValuePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ValuePoint}
 */
proto.ValuePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBeat(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ValuePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ValuePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ValuePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValuePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeatList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * repeated int32 beat = 1;
 * @return {!Array<number>}
 */
proto.ValuePoint.prototype.getBeatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ValuePoint} returns this
 */
proto.ValuePoint.prototype.setBeatList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ValuePoint} returns this
 */
proto.ValuePoint.prototype.addBeat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ValuePoint} returns this
 */
proto.ValuePoint.prototype.clearBeatList = function() {
  return this.setBeatList([]);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.ValuePoint.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ValuePoint} returns this
 */
proto.ValuePoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.Difficulty = {
  EASY: 0,
  NORMAL: 1,
  HARD: 2,
  EXPERT: 3,
  SPECIAL: 4
};

/**
 * @enum {number}
 */
proto.NoteType = {
  BPM: 0,
  SINGLE: 1,
  FLICK: 2,
  SLIDETICK: 3,
  SLIDETICKEND: 4
};

/**
 * @enum {number}
 */
proto.Transition = {
  CONSTANT: 0,
  LINEAR: 1,
  QUADRATICEASEIN: 2,
  QUADRATICEASEOUT: 3,
  QUADRATICEASEINOUT: 4,
  CUBICEASEIN: 5,
  CUBICEASEOUT: 6,
  CUBICEASEINOUT: 7,
  QUARTICEASEIN: 8,
  QUARTICEASEOUT: 9,
  QUARTICEASEINOUT: 10,
  QUINTICEASEIN: 11,
  QUINTICEASEOUT: 12,
  QUINTICEASEINOUT: 13,
  SINEEASEIN: 14,
  SINEEASEOUT: 15,
  SINEEASEINOUT: 16,
  CIRCULAREASEIN: 17,
  CIRCULAREASEOUT: 18,
  CIRCULAREASEINOUT: 19,
  EXPONENTIALEASEIN: 20,
  EXPONENTIALEASEOUT: 21,
  EXPONENTIALEASEINOUT: 22,
  ELASTICEASEIN: 23,
  ELASTICEASEOUT: 24,
  ELASTICEASEINOUT: 25,
  BACKEASEIN: 26,
  BACKEASEOUT: 27,
  BACKEASEINOUT: 28,
  BOUNCEEASEIN: 29,
  BOUNCEEASEOUT: 30,
  BOUNCEEASEINOUT: 31
};

goog.object.extend(exports, proto);
